import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;


public class Predator {
	
	Point pos;
	
	public Predator(Point pos)
	{
		this.pos = pos;
	}
	
	public void doAction(State environment)
	{

		Random generator = new Random();

		//find the positions around the prey
		List<Point> validMoves = new ArrayList<Point>();
		validMoves.add(State.nextTo(pos, "N"));
		validMoves.add(State.nextTo(pos, "E"));
		validMoves.add(State.nextTo(pos, "S"));
		validMoves.add(State.nextTo(pos, "W"));
		validMoves.add(pos);
		//move to a random position
		this.pos = validMoves.get(generator.nextInt(validMoves.size()));
	}
	
	
	public double stateValueFunction(State environment, String action)
	{
		
		//String[] actions = {"N", "E", "S", "W", "WAIT"};
		Map<Point, Double> hashedMoves = environment.prey.getValidMoves(environment);
		
		
		double[][] grid = new double[11][11];
		for(Point key : hashedMoves.keySet() )
		{
			State futureState = new State(environment); // clone environment
			futureState.prey.pos = key; // move prey to new pos
			double[][] tempGrid = valueIteration(futureState);
			grid = add(grid, times(tempGrid, hashedMoves.get(key)));
		}
		
		
	}
	
	public double[][] times(double[][] a, double factor)
	{
		for(int i=0; i<a.length; i++)
			for(int j=0; j<a[i].length; j++)
				a[i][j]*=factor;
		return a;
	}
	public double[][] add(double[][] a, double[][] b)
	{
		for(int i=0; i<a.length; i++)
			for(int j=0; j<a[i].length; j++)
			{
				a[i][j] += b[i][j];
			}
		return a;
	}
	
	
	
	public double[][] valueIteration(State environment)
	{
		String policy = "";
		double stateValue = 0;
		double delta = 0;
		double theta = 0.1;
		double gamma = 0.8;
		double[][] grid = new double[11][11];
		String[] actions = {"N", "E", "S", "W"};
		
		grid[environment.prey.pos.x][environment.prey.pos.y] = 10;
		int counter = 0;
		boolean valueChanged;
		do{
			counter++;
			valueChanged = false;
			for(int i =0 ; i<12;i++)
				for(int j = 0 ;  j <12 ; j++)
				{
					if(grid[i][j] == 0)
					{
						valueChanged = true;
						double value = 0;
						
						for(int k=0; k<actions.length;k++)
						{
							Point temppoint = State.nextTo(new Point(i,j),actions[k]);
							double tempValue = grid[temppoint.x][temppoint.y];
							if( tempValue > value )
								value = tempValue;
							
						}
						grid[i][j] = value*gamma;
					}
				}
					
		}while( valueChanged );
		
		//TODO choose policy
		return grid;
	}
	
	
	
	public String toString()
	{
		return String.format("Predator(%d,%d)", pos.x, pos.y);
	}

}
